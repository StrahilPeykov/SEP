# Generated by Django 5.2 on 2025-05-06 15:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('vat_number', models.CharField(max_length=255, unique=True)),
                ('business_registration_number', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Emission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Emission',
                'verbose_name_plural': 'Emissions',
            },
        ),
        migrations.CreateModel(
            name='EndOfLifeEmissionReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('landfill_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('incineration_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('recycled_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('reused_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
            ],
            options={
                'verbose_name': 'End of life emission reference',
                'verbose_name_plural': 'End of life emission references',
            },
        ),
        migrations.CreateModel(
            name='MaterialEmissionReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Material emission reference',
                'verbose_name_plural': 'Material emission references',
            },
        ),
        migrations.CreateModel(
            name='ProductionEnergyEmissionReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Production energy emission reference',
                'verbose_name_plural': 'Production energy emission references',
            },
        ),
        migrations.CreateModel(
            name='TransportEmissionReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Transport emission reference',
                'verbose_name_plural': 'Transport emission references',
            },
        ),
        migrations.CreateModel(
            name='UserEnergyEmissionReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'User energy emission reference',
                'verbose_name_plural': 'User energy emission references',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompanyMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Company membership',
                'verbose_name_plural': 'Company memberships',
                'ordering': ['-date_joined'],
                'unique_together': {('user', 'company')},
            },
        ),
        migrations.AddField(
            model_name='company',
            name='users',
            field=models.ManyToManyField(related_name='companies', through='core.CompanyMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EmissionOverrideFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField()),
                ('emission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='override_factors', to='core.emission')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('manufacturer', models.CharField(max_length=255)),
                ('sku', models.CharField(max_length=255)),
                ('is_public', models.BooleanField(default=True)),
                ('co_2_emissions_override', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.company')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductBoMLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('line_item_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='used_in_line_items', to='core.product')),
                ('parent_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='core.product')),
            ],
            options={
                'verbose_name': 'Product BoM line item',
                'verbose_name_plural': 'Product BoM line items',
            },
        ),
        migrations.CreateModel(
            name='ProductSharingRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_sharing_requests', to='core.product')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requester', to='core.company')),
            ],
            options={
                'verbose_name': 'Product sharing request',
                'verbose_name_plural': 'Product sharing requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EndOfLifeEmission',
            fields=[
                ('emission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.emission')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_emissions', to='core.endoflifeemissionreference')),
            ],
            options={
                'verbose_name': 'End of life emission',
                'verbose_name_plural': 'End of life emissions',
            },
            bases=('core.emission',),
        ),
        migrations.CreateModel(
            name='MaterialEmission',
            fields=[
                ('emission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.emission')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_emissions', to='core.materialemissionreference')),
            ],
            options={
                'verbose_name': 'Material emission',
                'verbose_name_plural': 'Material emissions',
            },
            bases=('core.emission',),
        ),
        migrations.CreateModel(
            name='ProductionEnergyEmission',
            fields=[
                ('emission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.emission')),
                ('energy_consumption', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='production_emissions', to='core.productionenergyemissionreference')),
            ],
            options={
                'verbose_name': 'Production energy emission',
                'verbose_name_plural': 'Production energy emissions',
            },
            bases=('core.emission',),
        ),
        migrations.CreateModel(
            name='TransportEmission',
            fields=[
                ('emission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.emission')),
                ('distance', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transport_emissions', to='core.transportemissionreference')),
            ],
            options={
                'verbose_name': 'Transport emission',
                'verbose_name_plural': 'Transport emissions',
            },
            bases=('core.emission',),
        ),
        migrations.CreateModel(
            name='UserEnergyEmission',
            fields=[
                ('emission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.emission')),
                ('energy_consumption', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_emissions', to='core.userenergyemissionreference')),
            ],
            options={
                'verbose_name': 'User energy emission',
                'verbose_name_plural': 'User energy emissions',
            },
            bases=('core.emission',),
        ),
        migrations.CreateModel(
            name='EndOfLifeEmissionReferenceFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emission_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_factors', to='core.endoflifeemissionreference')),
            ],
            options={
                'verbose_name': 'End of life emission reference factor',
                'verbose_name_plural': 'End of life emission reference factors',
                'unique_together': {('emission_reference', 'lifecycle_stage')},
            },
        ),
        migrations.CreateModel(
            name='MaterialEmissionReferenceFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emission_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_factors', to='core.materialemissionreference')),
            ],
            options={
                'verbose_name': 'Material emission reference factor',
                'verbose_name_plural': 'Material emission reference factors',
                'unique_together': {('emission_reference', 'lifecycle_stage')},
            },
        ),
        migrations.CreateModel(
            name='ProductionEnergyEmissionReferenceFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emission_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_factors', to='core.productionenergyemissionreference')),
            ],
            options={
                'verbose_name': 'Production energy emission reference factor',
                'verbose_name_plural': 'Production energy emission reference factors',
                'unique_together': {('emission_reference', 'lifecycle_stage')},
            },
        ),
        migrations.CreateModel(
            name='TransportEmissionReferenceFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emission_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_factors', to='core.transportemissionreference')),
            ],
            options={
                'verbose_name': 'Transport emission reference factor',
                'verbose_name_plural': 'Transport emission reference factors',
                'unique_together': {('emission_reference', 'lifecycle_stage')},
            },
        ),
        migrations.CreateModel(
            name='UserEnergyEmissionReferenceFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifecycle_stage', models.CharField(choices=[('A1', 'A1 - Raw material supply (and upstream production)'), ('A2', 'A2 - Cradle-to-gate transport to factory'), ('A3', 'A3 - Production'), ('A4', 'A4 - Transport to final destination'), ('A5', 'A5 - Installation'), ('A1-A3', 'A1-A3 - Raw material supply and production'), ('A4-A5', 'A4-A5 - Transport to final destination and installation'), ('B1', 'B1 - Usage phase'), ('B2', 'B2 - Maintenance'), ('B3', 'B3 - Repair'), ('B4', 'B4 - Replacement'), ('B5', 'B5 - Update/upgrade, refurbishing'), ('B6', 'B6 - Operational energy use'), ('B7', 'B7 - Operational water use'), ('B1-B7', 'B1-B7 - Entire usage phase'), ('C1', 'C1 - Reassembly'), ('C2', 'C2 - Transport to recycler'), ('C3', 'C3 - Recycling, waste treatment'), ('C4', 'C4 - Landfill'), ('C1-C4', 'C1-C4 - Decommissioning'), ('C2-C4', 'C2-C4 - Transport to recycler and landfill'), ('D', 'D - Reuse'), ('Other', 'Other')], default='Other', max_length=255)),
                ('co_2_emission_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emission_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reference_factors', to='core.userenergyemissionreference')),
            ],
            options={
                'verbose_name': 'User energy emission reference factor',
                'verbose_name_plural': 'User energy emission reference factors',
                'unique_together': {('emission_reference', 'lifecycle_stage')},
            },
        ),
    ]
